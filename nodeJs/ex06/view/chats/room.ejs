<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title><%= room.title %></title>
	<link rel="icon" type="image/svg" href="/images/favicon.svg"/>
	<link rel="stylesheet" href="/css/common/normalize.css">
	<link rel="stylesheet" href="/css/common/default.css">
	<link rel="stylesheet" href="/css/common/header.css">
	<link rel="stylesheet" href="/css/article/article.css">
	<link rel='stylesheet' href='https://cdn-uicons.flaticon.com/uicons-regular-rounded/css/uicons-regular-rounded.css'>
	<style>
		main {
			margin-top: 0;
		}
		#room {
			width: 100%;
			height: calc(100vh - var(--headerHeight));
		}
		.owner {
			width: 2.4rem;
			height: 2.4rem;
			display: inline-block;
			overflow: hidden;
			text-overflow: ellipsis;
			white-space: nowrap;
			line-height: 1.7rem;
			border-radius: 50%;
			background-color: var(--bgLight);
			color: var(--gray999);
			padding: 0.3rem;
		}
		.chatView {
			overflow-y: auto;
			padding: .8rem;
			gap: .6rem
		}
		.chatView .msgArea {
			max-width: 70vw;
			align-items: flex-end;
		}
		.chatView .serverMsg {
			width: fit-content;
			align-self: center;
			font-size: .8rem;
			border-radius: 1rem;
			background-color: var(--bgLight);
			color: var(--gray999);
			margin: 0.8rem 0;
			padding: 0.4rem 0.8rem;
		}
		.chatView .msgArea .talker {
			font-size: .8rem;
			color: var(--gray777);
		}
		.chatView .msgArea .msg {
			font-size: .9rem;
			border-radius: .2rem;
			background-color: #ddd;
			padding: .4rem .5rem;
		}
		.chatView .msgArea .time {
			font-size: .6rem;
			white-space: nowrap;
			color: var(--gray999);
			margin: 0 .4rem;
		}
		.chatView .msgArea.mine {
			align-self: flex-end;
		}
		.chatView .msgArea.mine .talker {
			display: none;
		}
		.chatView .msgArea.mine .msg {
			background-color: #fff;
			margin-top: .4rem;
		}
		.chatView .msgArea.mine .time{
			order: -1;
		}
		.messageWrite {
			background-color: #fff;
			gap: .8rem;
			padding: 1rem;
		}
		.messageWrite textarea {
			padding: 0;
			background-color: transparent;
		}
		.messageWrite textarea::placeholder {
			font-size: .9rem;
			font-weight: lighter;
		}
		.messageWrite textarea:focus {
			outline: none;
		}
		.messageWrite .sumitBtn{
			height: fit-content;
			font-size: .9rem;
			border: transparent;
			border-radius: .2rem;
			color: #fff;
			background-color: var(--successColor);
			padding: .4rem .6rem;
		}
		.headerLeft .joinerList {
			display: none;
			max-width: 80vw;
			position: absolute;
			z-index: 500;
			left: 3rem;
			top: 4rem;
			font-size: .8rem;
			text-align: left;
			border-radius: .4rem;
			background-color: var(--bgLight);
			box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px;
			padding: .8rem;
		}
		.headerLeft .owner:hover ~ .joinerList {
			display: block;
		}
	</style>
</head>
<body>
	<header>
		<div class="headerLeft">
			<small class="owner"><%= room.owner %></small>
			<div class="joinerList">
				<%= room.joiner.join(', ') %>
			</div>
		</div>
		<div class="headerCenter">
			<h3><%= room.title %> <small>(<%=room.joiner.length%>)</small></h3>
		</div>
		<div class="headerRight">
			<a href="/chats/exit?_id=<%= room._id %>">
				<button><i class="fi fi-rr-exit"></i></button>
			</a>
		</div>
	</header>
	<main>
		<div id="room" class="col">
			<div class="chatView grow1 col">
				<% messages.forEach(message => { %>
					<div class="msgArea <%=message.type %> row">
						<div class="msgContent">
							<div class="talker"><%= message.talker %> </div>
							<div class="msg"><%= message.content %></div>
						</div>
						<div class="time createAt"><%= message.createdAt.toLocaleTimeString() %> </div>
					</div>
				<% }) %> 
			</div>
			<div class="messageWrite row">
				<textarea type="text" class="grow1"  placeholder="메세지를 입력하세요" id="writeMsg" data-room-id="<%= room._id %>"></textarea>
				<button type="submit" class="sumitBtn">전송</button>
			</div>
		</div>
	</main>
	<script>
		rebalanceHeight();
		document.querySelector('#writeMsg').onchange = (evt) => {
			if(evt.target.value.trim().length === 0) {
				return;
			}
			const headers = {"Content-type" : "application/json" } 
			fetch("/chats/api/message",  {
				headers, method: 'post', body : JSON.stringify({
					roomId: evt.target.dataset.roomId,
					content: evt.target.value
				})
			}).then(response => {
				return response.json();
			}).then(json => {
				console.log(json);
			}).catch(err => {
				alert('서버와의 통신에 일시적인 장애가 있습니다')
			});
			evt.target.value = '';
		};

		const roomId = document.querySelector('#writeMsg').dataset.roomId;
		const ws = new WebSocket(`ws://${location.host}/chats/room?_id=${roomId}`);
		ws.onmessage = function(rst) {
			let msg = JSON.parse(rst.data);
			if(msg.apply !== roomId) {
				return;
			}
				let div = document.createElement("div");
				div.classList.add("serverMsg");
			switch(msg.type) {
				case 'join':
					div.appendChild(document.createTextNode(msg.id+"님이 입장하였습니다."));
					document.querySelector('.chatView').appendChild(div);
					document.querySelector('.joinerList').textContent = msg.joiner;
					document.querySelector(`.headerCenter small`).textContent = `(${msg.joiner.length})`;
					break;
				case 'exit':
					div.appendChild(document.createTextNode(msg.id+"님이 퇴장하였습니다."));
					div.classList.add("serverMsg");
					document.querySelector('.chatView').appendChild(div);
					document.querySelector('.joinerList').innerHTML = msg.joiner;
					document.querySelector(`.headerCenter small`).innerHTML = `(${msg.joiner.length})`
					break;

				case 'new': 
					let html = `
						<div class="msgArea row ${msg.data.type}">
							<div class="msgContent">
								<div class="talker">${msg.data.talker} </div>
								<div class="msg">${msg.data.content}</div>
							</div>
							<div class="time createAt">${new Date(msg.data.createdAt).toLocaleTimeString()}</div>
						</div>
					`
					document.querySelector('.chatView').insertAdjacentHTML(
						'beforeend', html
					);
			}
			rebalanceHeight()
			// console.log(msg);
		}
		
		function rebalanceHeight() {
			document.querySelector('.chatView').scrollTop = document.querySelector('.chatView').scrollHeight;
		}
	</script>
</body>
</html>