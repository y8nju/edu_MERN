<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Home | Knocknock</title>
	<link rel="icon" type="image/svg" href="/images/favicon.svg"/>
	<link rel="stylesheet" href="/css/common/normalize.css">
	<link rel="stylesheet" href="/css/common/default.css">
	<link rel="stylesheet" href="/css/common/header.css">
	<link rel="stylesheet" href="/css/common/modal.css">
	<link rel="stylesheet" href="/css/common/toast.css">
	<link rel="stylesheet" href="/css/chats/home.css">
	<link rel='stylesheet' href='https://cdn-uicons.flaticon.com/uicons-solid-rounded/css/uicons-solid-rounded.css'>
</head>
<body>
	<%- include("../common/header.ejs") %> 
	<main>
		<div id="home" class="col">
			<input type="hidden" value="<%=userSession%>" class="userSession">
			<div class="container between">
				<section class="row between" style="align-items: center;">
					<h3>참여 중인 채팅<small>(<%=joinRooms.length%>)</small></h3>
					<button type="button" onclick="newRoomModal('flex')" class="addChat iconBtn"><i class="fi fi-sr-add"></i></button>
				</section>
				<section>
					<select class="roomSel" onchange="roomSel()">
						<option value="joinList" data-name="참여 중인 채팅" selected>참여 중인 채팅</option>
						<option value="allList" data-name="전체 채팅">전체 채팅</option>
						<option value="notList" data-name="미참여 채팅">미참여 채팅</option>
					</select>
				</section>
				</div>
				<section class="roomListArea">
					<div class="roomList active" id="joinList" title="참여 중인 채팅">
						<% joinRooms.forEach(room => { %> 
							<!-- 참여 중인 채팅방의 경우 비밀번호를 받지 않아도 됨 -->
							<article class="card row" onclick="location.href='/chats/room?_id=<%= room._id %>'">
								<div class="row center owner">
									<span><%=room.owner%></span>
								</div>
								<div class="grow1">
									<div class="row">
										<span class="roomTit"><%=room.title%> <small><%=room.joiner.length%></small></span> 
										<% if(room.type=='private') { %>
										<span class="private"><i class="fi fi-sr-lock"></i></span>
										<% } %> 
										<span class="createdAt">
											<% if(new Date(new Object(room.lastMsg).createdAt).toLocaleDateString() == today.toLocaleDateString()) { %> 
												<%= new Object(room.lastMsg).createdAt.toLocaleTimeString().substring(0, new Object(room.lastMsg).createdAt.toLocaleTimeString().lastIndexOf(':'))%>
											<% }else { %> 
												<%= new Object(room.lastMsg).createdAt ? new Date(new Object(room.lastMsg).createdAt).toLocaleDateString().slice(6) : '' %>
											<% } %>
										</span>
									</div>
									<div class="roomInfo row between">
										<span id="lastMsg_<%=room._id%>" class="lastMsg">
											<% if(new Object(room.lastMsg).data == 'chat') { %>
												<%= new Object(room.lastMsg).content ?? '' %>
											<% }else if(new Object(room.lastMsg).data == 'file') { %> 
												사진
											<% } %>
										</span>
										<span id="cnt_<%=room._id%>" class="newCnt"><%= room.count%></span>
									</div>
								</div>
							</article>
						<% }) %>
					</div>
					<div class="roomList" id="allList" title="전체 채팅">
						<% rooms.forEach(room => { %> 
							<article class="card row" onclick="
								<% if(room.type=='public' || room.joinerList.includes(userSession)) { %>
									location.href='/chats/room?_id=<%= room._id %>'
								<% }else {%> 
									pwChkModal('flex', '<%= room._id %>');
								<% }%>
								">
								<div class="row center owner">
									<span><%=room.owner%></span>
								</div>
								<div class="grow1">
									<div class="row">
										<span class="roomTit"><%=room.title%> <small><%=room.joiner.length%></small></span> 
										<% if(room.type=='private') { %>
										<span class="private"><i class="fi fi-sr-lock"></i></span>
										<% } %> 
										<span class="createdAt">
											<% if(new Date(new Object(room.lastMsg).createdAt).toLocaleDateString() == today.toLocaleDateString()) { %> 
												<%= new Object(room.lastMsg).createdAt.toLocaleTimeString().substring(0, new Object(room.lastMsg).createdAt.toLocaleTimeString().lastIndexOf(':'))%>
											<% }else { %> 
												<%= new Object(room.lastMsg).createdAt ? new Date(new Object(room.lastMsg).createdAt).toLocaleDateString().slice(6) : '' %>
											<% } %>
										</span>
									</div>
									<div class="roomInfo row between">
										<span id="lastMsg_<%=room._id%>" class="lastMsg">
											<% if(new Object(room.lastMsg).data == 'chat') { %>
												<%= new Object(room.lastMsg).content ?? '' %>
											<% }else if(new Object(room.lastMsg).data == 'file') { %> 
												사진
											<% } %>
										</span>
										<span id="cnt_<%=room._id%>" class="newCnt"><%= room.count%></span>
									</div>
								</div>
							</article>
						<% }) %>
					</div>
					<div class="roomList" id="notList" title="미참여 채팅">
						<% notRooms.forEach(room => { %> 
							<article class="card row" onclick="
								<% if(!(room.type=='private')) { %>
								location.href='/chats/room?_id=<%= room._id %>'
								<% }else{%> 
									pwChkModal('flex', '<%= room._id %>');
								<% } %>
								">
								<div class="row center owner">
									<span><%=room.owner%></span>
								</div>
								<div class="grow1">
									<div class="row">
										<span class="roomTit"><%=room.title%> <small><%=room.joiner.length%></small></span> 
										<% if(room.type=='private') { %>
										<span class="private"><i class="fi fi-sr-lock"></i></span>
										<% } %> 
										<span class="createdAt"></span>
									</div>
									<div class="roomInfo row between">
										<span id="lastMsg_<%=room._id%>" class="lastMsg"></span>
										<span id="cnt_<%=room._id%>" class="newCnt"></span>
									</div>
								</div>
							</article>
						<% }) %>
					</div>
				</div>
			</div>
		</div>
		<div class="modal" id="newRoomModal" title="채팅방 개설 모달">
			<article class="modalContent card">
				<div class="row">
					<button type="button" class="btn closeBtn" onclick="newRoomModal('none')">닫기</button>
				</div>
				<div class="modalTit">
					<h3>채팅방개설</h3>
				</div>
				<div class="modalBody">
					<form action="/chats/open" method="post">
						<div>
							<label for="title">
								<input type="text" name="title" id="title" class="borderB" placeholder="채팅방 이름을 입력해주세요">
							</label>
						</div>
						<div class="row privateChk">
							<label for="public" class="customLabel">
								<input type="radio" name="type" value="public" id="public" class="customRadio" checked> 공개
							</label>
							<label for="private" class="customLabel grow1">
								<input type="radio" name="type" value="private" id="private" class="customRadio"> 비공개
								<input type="text" name="password" id="password" placeholder="비밀번호를 입력하세요" class="grow1">
							</label>
						</div>
						<div class="row center">
							<button type="submit" class="btn confirmBtn">방 개설</button>
						</div>
					</form>
				</div>
			</article>
		</div>
		<div class="modal" id="pwChkModal" title="비밀번호 체크 모달">
			<article class="modalContent card">
				<div class="row">
					<button type="button" class="btn closeBtn" onclick="pwChkModal('none')">닫기</button>
				</div>
				<div class="modalTit">
					<h3>비밀번호 확인</h3>
				</div>
				<div class="modalBody">
					<form action="" onsubmit="return false">
						<input type="hidden" name="_id" class="roomId">
						<div>
							<label for="pwChk">
								<input type="password" name="pwChk" id="pwChk" class="borderB" placeholder="비밀번호를 입력해주세요" onchange="pwChkApi(event)">
							</label>
							<p class="pwMsg"></p>
						</div>
						<div class="row center">
							<button type="submit" class="btn confirmBtn" disabled>확인</button>
						</div>
					</form>
				</div>
			</article>
		</div>
		<div class="toast">
			<p class="toastTxt"></p>
		</div>
	</main>
	<script>
		isNewCnt()
		function roomSel() {
			let roomSel = document.querySelector('.roomSel');
			let selVal = roomSel.options[roomSel.selectedIndex].value;
			let roomList = document.querySelectorAll('.roomList');
			roomList.forEach((elm) => {
				elm.classList.remove('active');
			})
			document.querySelector('#'+selVal).classList.add('active');
			let selName = roomSel.options[roomSel.selectedIndex].dataset.name;
			let rooms = document.querySelectorAll(`.active .card`)
			document.querySelector('h3').innerHTML = `${selName}<small>(${rooms.length})</small>`
		}
		function newRoomModal(e) {
			document.querySelector('#newRoomModal').style.display = e;
		}
		function pwChkModal(e, roomId) {
			document.querySelector('#pwChkModal').style.display = e;
			document.querySelector(`.roomId`).setAttribute('value', `${roomId}`);
			document.querySelector(`#pwChkModal form`).setAttribute('action', `/chats/room?_id=${roomId}`)
		}
		async function pwChkApi(evt) {
			let pwChkBtn = document.querySelector(`#pwChkModal .confirmBtn`);
			let roomId = document.querySelector(`.roomId`).value;
			let pwMsg = document.querySelector('.pwMsg')
			let response = await fetch(`/chats/api/pwChk?_id=${roomId}&password=${evt.target.value}`, {method :"get"});
			let json = await response.json();
			console.log(json)
			if(json.success) {
				pwChkBtn.disabled = false;
				pwMsg.innerHTML = '';
				document.querySelector(`#pwChkModal form`).setAttribute('onsubmit', '');
			}else{
				pwChkBtn.disabled = true;
				pwMsg.innerHTML = '⩗ 비밀번호가 일치하지 않습니다';
				if(evt.target.value.trim().length == 0) {
					pwMsg.innerHTML = '';
				}
			}
		}
		const ws = new WebSocket(`ws://${location.host}/chats/sse`);
		ws.onmessage = function(recv) {
			let message = JSON.parse(recv.data);
			let userSession = document.querySelector('.userSession').value;
			switch(message.type) {
				case 'new':
					if(message.session !== userSession){
						document.querySelector('.toast').style.display = 'block';
						document.querySelector('.toastTxt').innerHTML = '새로 개설된 채팅방이 있습니다';
						setTimeout(function() {
							location.reload();
						}, 2000);
					}
					break;
				case "added" :
					checkCount(message.roomId);
					lastMsg(message.roomId);
					break;
				case 'delete' :
					if(message.session !== userSession){
						document.querySelector('.toast').style.display = 'block';
						document.querySelector('.toastTxt').innerHTML = `참여 중인 ${message.roomTitle}채팅이 삭제되었습니다`;
						setTimeout(function() {
							location.reload();
						}, 2000);
					}
					break;
			}
		}
		async function checkCount(roomId) {
			let response = await fetch("/chats/api/checkcount?roomId="+roomId);
			let json = await response.json();
			if(json.success) {
				document.querySelector(`#room_${roomId} .newCnt`).innerHTML = json.count;
				isNewCnt();
			}
		}
		async function lastMsg(roomId){
			let response = await fetch("/chats/api/lastMsg?roomId="+roomId);
			let json = await response.json();
			if(json.success) {
				let lastMsg = document.querySelector(`#room_${roomId} .lastMsg`);
				let lastMsgTime = document.querySelector(`#room_${roomId} .createdAt`);
				let msgType = json.lastMsg[0].data
				if(msgType == 'chat') {
					lastMsg.innerHTML = json.lastMsg[0].content;
				lastMsgTime.innerHTML = new Date(json.lastMsg[0].createdAt).toLocaleTimeString().substring(0, new Date(json.lastMsg[0].createdAt).toLocaleTimeString().lastIndexOf(':'))
				} else if(msgType == 'file') {
					lastMsg.innerHTML = '사진';
				lastMsgTime.innerHTML = new Date(json.lastMsg[0].createdAt).toLocaleTimeString().substring(0, new Date(json.lastMsg[0].createdAt).toLocaleTimeString().lastIndexOf(':'))
				}
			}
		}
		function isNewCnt() {
			let newCnt = document.querySelectorAll('.newCnt');
			for(cnt of newCnt) {
				if(parseInt(cnt.textContent) > 0){
					cnt.classList.add('active');
				}else {
					cnt.classList.remove('active');
				}
			}
		}
	</script>
</body>
</html>